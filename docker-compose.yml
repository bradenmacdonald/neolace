# Most Neolace services run on port 555x:
#
# 5550
# 5551
# 5552 - authentication server (public port)
# 5553 - redis (cache, message queue)
# 5554 - backend (REST API)
# 5555 - frontend (local development)
# 5556 - TypeSense (search)
# 5557 - imgproxy (optional, used to serve image thumbnails)
# 5558 - imgproxy gateway (used to restrict access to imgproxy)
# 5559 - authentication server (private port for backend use only)
# 7474 - Neo4j web UI
# 7687 - Neo4j Bolt interface
# 9000 - MinIO (S3-compatible object storage)
#
# For tests, these same services run on ports with the 444x prefix instead of 555x


# Configuration for our development and test environments
version: '3'
x-service-templates:
  neo4j:
    &neo4j-defaults
    image: neo4j:4.3
    environment:
      # Set default password to "neolace"
      NEO4J_AUTH: neo4j/neolace
      # We need trigger functionality, which is part of "APOC" and must be enabled:
      NEO4J_dbms_directories_plugins: /var/lib/neo4j/labs
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      # Enable trigger functionality:
      NEO4J_apoc_trigger_enabled: "true"
      # The following is needed for apoc.export.cypher.all, even though we're only exporting to memory, not disk.
      NEO4J_apoc_export_file_enabled: "true"
  authn:
    &authn-defaults
    image: keratin/authn-server:1.10.2
    depends_on:
      - redis
    environment:
      &authn-environment-defaults
      PORT: 5559
      PUBLIC_PORT: 5552
      APP_PASSWORDLESS_TOKEN_URL: http://host.docker.internal:5554/auth/passwordless-login
      APP_PASSWORD_RESET_URL: http://host.docker.internal:5554/auth/password-reset
      DATABASE_URL: sqlite3://localcontainer/data/authn.sqlite3?cache=shared
      SECRET_KEY_BASE: neolace-dev
      HTTP_AUTH_USERNAME: authn
      HTTP_AUTH_PASSWORD: neolace
      REDIS_URL: redis://:devpassword@redis:6379/8
      USERNAME_IS_EMAIL: "true"
      PASSWORD_CHANGE_LOGOUT: "true"  # user password changes will expire all other sessions
      AUTHN_URL: http://localhost:5552  # Public URL as reachable by end users
      APP_DOMAINS: localhost:5555
    entrypoint: ["/bin/sh", "-c", "./authn migrate && ./authn server"]  # Override to ensure migrations get run


services:
  ################################################################
  # Redis cache / message queue
  ################################################################
  redis:
    image: redis:6.0-alpine
    command: >
     --requirepass devpassword
    # Redis DB 0 is used by the neolace backend.
    # Redis DB 1 is used by the neolace backend (tests).
    # Redis DB 8 is used by AuthN microservice.
    ports:
      - 5553:6379

  ################################################################
  # Neo4j graph database
  ################################################################
  neo4j:
    << : *neo4j-defaults
    ports:
      - 7474:7474  # Browse on your host at http://localhost:7474/browser/?connectURL=neo4j://localhost:7687
      - 7687:7687  # Bolt
    volumes:
      - neo4j-data:/data
  # A separate copy of Neo4j just for the test suite; this one has ephemeral data.
  # This is necessary because Neo4j community doesn't support multiple databases
  neo4j-test:
    << : *neo4j-defaults
    ports:
      - 4474:7474  # Browse on your host at http://localhost:4474/browser/?connectURL=neo4j://localhost:4687
      - 4687:7687  # Bolt

  ################################################################
  # Authentication Server
  ################################################################
  authn:
    << : *authn-defaults
    ports:
      - 5552:5552  # Expose public port to the host computer so users can log in
      - 5559:5559  # Private port
    volumes:
      - authn-data:/data
  authn-test:
    << : *authn-defaults
    environment:
      << : *authn-environment-defaults
      AUTHN_URL: http://authn-test:4442  # Public URL as reachable by end users
      APP_DOMAINS: backend:4445
    ports:
      - 4442:5552  # Expose public port to the host computer so users can log in
      - 4449:5559  # Expose public port to the host computer so users can log in
    volumes:
      - authn-data:/data

  ################################################################
  # TypeSense (search server)
  ################################################################
  search:
    image: typesense/typesense:0.22.2
    ports:
      - 5556:8108
    command: >
     --data-dir /data --api-key=typesensedevkey --enable-cors
    volumes:
      - typesense-data:/data
    # Suppress TypeSense's extremely noisy logging by default
    logging:
      driver: none

  ################################################################
  # S3-compatible object storage (used only for development)
  ################################################################
  objstore:
    image: minio/minio:RELEASE.2021-10-27T16-29-42Z
    entrypoint: sh
    # command: ["server", "/data"]
    # Create the two default buckets for dev and test configurations, then start the server:
    command: -c 'mkdir -p /data/neolace-objects && mkdir -p /data/neolace-test-objects && minio server /data'
    environment:
      MINIO_ROOT_USER: AKIA_NEOLACE_DEV
      MINIO_ROOT_PASSWORD: neolace123
      MINIO_REGION_NAME: dev-region
    ports:
      - 9000:9000
      - 5557:5557  # For the imgproxy, if being used. See note in "imgproxy" service definition
      - 5558:5558  # For the imgproxy-gateway, if being used.
    volumes:
      - objstore-data:/data/

  createbuckets:
    # Make sure buckets exist and allow public read ("download")
    image: minio/mc
    depends_on:
      - objstore
    entrypoint: >
      /bin/sh -c "
      sleep 3;
      mc config host add objstore http://objstore:9000 AKIA_NEOLACE_DEV neolace123;
      mc policy set download objstore/neolace-objects;
      mc policy set download objstore/neolace-test-objects;
      exit 0;
      "

  ################################################################
  # Image Proxy (run this via docker-compose.override.yml) if you
  # want to test prod-like image thumbnailing + CDN
  ################################################################

  # imgproxy:
  #   image: darthsim/imgproxy:v3.3.3
  #   environment:
  #     IMGPROXY_BIND: ":5557"
  #     IMGPROXY_KEY: 6E656F6C616365313233  # "neolace123" is the secret key (imgproxy needs it hex encoded)
  #     IMGPROXY_SALT: 6E656F73616C74  # "neosalt" is the salt
  #     IMGPROXY_MAX_SRC_RESOLUTION: 30  # Don't give errors on medium-sized files, only super huge ones.
  #     IMGPROXY_CACHE_CONTROL_PASSTHROUGH: "true"  # Pass through our "immutable" cache-control headers; don't use the 1 hour default
  #   # Run imgproxy on the same network as objstore, so that it can resolve "localhost:9000" URLs without us
  #   # having to sometimes use "objstore:9000" and other times use "localhost:9000" depending on whether
  #   # the end user's browser or imgproxy is handling the request.
  #   network_mode: "service:objstore"

  # imgproxy-gateway:
  #   image: ghcr.io/neolace-dev/improxy-gateway:build-docker-img
  #   environment:
  #     IMGPROXY_KEY: 6E656F6C616365313233
  #     IMGPROXY_SALT: 6E656F73616C74
  #     # IMGPROXY_GATEWAY_ALLOWED_WIDTHS: "[256, 640, 1000, 2000, 4000]"
  #     # IMGPROXY_GATEWAY_IMGPROXY_URL: http://localhost:5557
  #     # IMGPROXY_GATEWAY_OBJSTORE_PUBLIC_URL_PREFIX: http://localhost:9000/neolace-objects
  #   network_mode: "service:objstore"  # Run imgproxy gateway on the same network as objstore, for same reason as imgproxy

volumes:
  neo4j-data:
  authn-data:
  objstore-data:
  typesense-data:
