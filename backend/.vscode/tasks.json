{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run test suite setup (create data fixtures)",
            "type": "shell",
            "command": "deno",
            "options": {
                "env": {
                    "ENV_TYPE": "test"
                }
            },
            "args": [
                "run",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-read",
                "--allow-env",
                "--allow-write",
                "neolace/scripts/test-setup.ts"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run test suite",
            "type": "shell",
            "command": "deno",
            "options": {
                "env": {
                    "ENV_TYPE": "test"
                }
            },
            "args": [
                "test",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-env",
                "--allow-read"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run backend (watch mode)",
            "type": "shell",
            "command": "deno",
            // We can make this stable once "Deno.addSignalListener" and "--watch" are stabilized.
            "args": [
                "run",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-env",
                "--allow-read",
                "--watch",
                "--no-check",
                "neolace/api/server.ts"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run backend (with type checks)",
            "type": "shell",
            "command": "deno",
            // We can make this stable once "Deno.addSignalListener" and "--watch" are stabilized.
            "args": [
                "run",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-env",
                "--allow-read",
                "neolace/api/server.ts"
            ],
            "problemMatcher": []
        },
        {
            "label": "Run neolace database servers",
            "type": "shell",
            "command": "docker-compose",
            "args": ["up"],
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": []
        },
        {
            "label": "Erase Dev DB and re-create PlantDB example",
            "type": "shell",
            "command": "deno",
            "args": [
                "run",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-read",
                "--allow-env",
                "neolace/scripts/reset-dev-data-create-plantdb.ts"
            ],
            "problemMatcher": []
        },
        {
            "label": "Fully reset/erase data",
            "type": "shell",
            "command": "docker-compose",
            "args": ["down", "-v"],
            "problemMatcher": []
        },
        {
            "label": "Apply database migrations",
            "type": "shell",
            "command": "deno",
            "args": [
                "run",
                "--import-map=import_map.json",
                "--allow-net",
                "--allow-env",
                "neolace/scripts/migrate.ts"
            ],
            "problemMatcher": []
        },
        {
            "label": "Build backend container image (prod)",
            "type": "shell",
            "command": "docker",
            "args": ["build", "--pull", "-t", "neolace/neolace-app/backend:latest", "-f", "backend/Dockerfile", "."],
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/.."
            }
        },
        {
            "label": "Run backend container image (prod) with local dev databases",
            "type": "shell",
            "command": "docker",
            "args": [
                "run",
                "-e",
                "ENV_TYPE=development",
                "-e",
                "neo4jUrl=bolt://host.docker.internal:7687",
                "-p",
                "5554:5554",
                "neolace/neolace-app/backend:latest"
            ],
            "problemMatcher": []
        }
    ]
}
